// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.happyhour.entity;

import com.happyhour.entity.PromotionRequest;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;

privileged aspect PromotionRequest_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager PromotionRequest._entityManager;
    
    public static long PromotionRequest.countPromotionRequests() {
        return entityManager().createQuery("SELECT COUNT(o) FROM PromotionRequest o", Long.class).getSingleResult();
    }
    
    public static List<PromotionRequest> PromotionRequest.findAllPromotionRequests() {
        return entityManager().createQuery("SELECT o FROM PromotionRequest o", PromotionRequest.class).getResultList();
    }
    
    public static PromotionRequest PromotionRequest.findPromotionRequest(Long id) {
        if (id == null) return null;
        return entityManager().find(PromotionRequest.class, id);
    }
    
    public static List<PromotionRequest> PromotionRequest.findPromotionRequestEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM PromotionRequest o", PromotionRequest.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void PromotionRequest.persist() {
        if (this._entityManager == null) this._entityManager = entityManager();
        this._entityManager.persist(this);
    }
    
    @Transactional
    public void PromotionRequest.remove() {
        if (this._entityManager == null) this._entityManager = entityManager();
        if (this._entityManager.contains(this)) {
            this._entityManager.remove(this);
        } else {
            PromotionRequest attached = PromotionRequest.findPromotionRequest(this.id);
            this._entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void PromotionRequest.flush() {
        if (this._entityManager == null) this._entityManager = entityManager();
        this._entityManager.flush();
    }
    
    @Transactional
    public void PromotionRequest.clear() {
        if (this._entityManager == null) this._entityManager = entityManager();
        this._entityManager.clear();
    }
    
    @Transactional
    public PromotionRequest PromotionRequest.merge() {
        if (this._entityManager == null) this._entityManager = entityManager();
        PromotionRequest merged = this._entityManager.merge(this);
        this._entityManager.flush();
        return merged;
    }
    
}
