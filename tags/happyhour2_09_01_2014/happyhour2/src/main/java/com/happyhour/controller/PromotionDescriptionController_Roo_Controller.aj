// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.happyhour.controller;

import com.happyhour.controller.PromotionDescriptionController;
import com.happyhour.entity.PromotionDescription;
import com.happyhour.service.PromotionDescriptionService;
import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect PromotionDescriptionController_Roo_Controller {
    
    @Autowired
    PromotionDescriptionService PromotionDescriptionController.promotionDescriptionService;
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String PromotionDescriptionController.create(@Valid PromotionDescription promotionDescription, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, promotionDescription);
            return "promotiondescriptions/create";
        }
        uiModel.asMap().clear();
        promotionDescriptionService.savePromotionDescription(promotionDescription);
        return "redirect:/promotiondescriptions/" + encodeUrlPathSegment(promotionDescription.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String PromotionDescriptionController.createForm(Model uiModel) {
        populateEditForm(uiModel, new PromotionDescription());
        return "promotiondescriptions/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String PromotionDescriptionController.show(@PathVariable("id") Long id, Model uiModel) {
        uiModel.addAttribute("promotiondescription", promotionDescriptionService.findPromotionDescription(id));
        uiModel.addAttribute("itemId", id);
        return "promotiondescriptions/show";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String PromotionDescriptionController.update(@Valid PromotionDescription promotionDescription, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, promotionDescription);
            return "promotiondescriptions/update";
        }
        uiModel.asMap().clear();
        promotionDescriptionService.updatePromotionDescription(promotionDescription);
        return "redirect:/promotiondescriptions/" + encodeUrlPathSegment(promotionDescription.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String PromotionDescriptionController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        populateEditForm(uiModel, promotionDescriptionService.findPromotionDescription(id));
        return "promotiondescriptions/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String PromotionDescriptionController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        PromotionDescription promotionDescription = promotionDescriptionService.findPromotionDescription(id);
        promotionDescriptionService.deletePromotionDescription(promotionDescription);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/promotiondescriptions";
    }
    
    void PromotionDescriptionController.populateEditForm(Model uiModel, PromotionDescription promotionDescription) {
        uiModel.addAttribute("promotionDescription", promotionDescription);
    }
    
    String PromotionDescriptionController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
