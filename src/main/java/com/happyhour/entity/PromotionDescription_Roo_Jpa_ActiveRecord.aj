// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.happyhour.entity;

import com.happyhour.entity.PromotionDescription;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;

privileged aspect PromotionDescription_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager PromotionDescription.entityManager;
    
    public static final EntityManager PromotionDescription.entityManager() {
        EntityManager em = new PromotionDescription().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long PromotionDescription.countPromotionDescriptions() {
        return entityManager().createQuery("SELECT COUNT(o) FROM PromotionDescription o", Long.class).getSingleResult();
    }
    
    public static List<PromotionDescription> PromotionDescription.findAllPromotionDescriptions() {
        return entityManager().createQuery("SELECT o FROM PromotionDescription o", PromotionDescription.class).getResultList();
    }
    
    public static PromotionDescription PromotionDescription.findPromotionDescription(Long id) {
        if (id == null) return null;
        return entityManager().find(PromotionDescription.class, id);
    }
    
    public static List<PromotionDescription> PromotionDescription.findPromotionDescriptionEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM PromotionDescription o", PromotionDescription.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void PromotionDescription.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void PromotionDescription.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            PromotionDescription attached = PromotionDescription.findPromotionDescription(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void PromotionDescription.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void PromotionDescription.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public PromotionDescription PromotionDescription.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        PromotionDescription merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
