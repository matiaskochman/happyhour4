// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.happyhour.entity;

import com.happyhour.entity.BusinessEstablishment;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;

privileged aspect BusinessEstablishment_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager BusinessEstablishment._entityManager;
    
    public static final EntityManager BusinessEstablishment.entityManager() {
        EntityManager em = new BusinessEstablishment()._entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long BusinessEstablishment.countBusinessEstablishments() {
        return entityManager().createQuery("SELECT COUNT(o) FROM BusinessEstablishment o", Long.class).getSingleResult();
    }
    
    public static List<BusinessEstablishment> BusinessEstablishment.findAllBusinessEstablishments() {
        return entityManager().createQuery("SELECT o FROM BusinessEstablishment o", BusinessEstablishment.class).getResultList();
    }
    
    public static BusinessEstablishment BusinessEstablishment.findBusinessEstablishment(Long id) {
        if (id == null) return null;
        return entityManager().find(BusinessEstablishment.class, id);
    }
    
    public static List<BusinessEstablishment> BusinessEstablishment.findBusinessEstablishmentEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM BusinessEstablishment o", BusinessEstablishment.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void BusinessEstablishment.persist() {
        if (this._entityManager == null) this._entityManager = entityManager();
        this._entityManager.persist(this);
    }
    
    @Transactional
    public void BusinessEstablishment.remove() {
        if (this._entityManager == null) this._entityManager = entityManager();
        if (this._entityManager.contains(this)) {
            this._entityManager.remove(this);
        } else {
            BusinessEstablishment attached = BusinessEstablishment.findBusinessEstablishment(this.id);
            this._entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void BusinessEstablishment.flush() {
        if (this._entityManager == null) this._entityManager = entityManager();
        this._entityManager.flush();
    }
    
    @Transactional
    public void BusinessEstablishment.clear() {
        if (this._entityManager == null) this._entityManager = entityManager();
        this._entityManager.clear();
    }
    
    @Transactional
    public BusinessEstablishment BusinessEstablishment.merge() {
        if (this._entityManager == null) this._entityManager = entityManager();
        BusinessEstablishment merged = this._entityManager.merge(this);
        this._entityManager.flush();
        return merged;
    }
    
}
